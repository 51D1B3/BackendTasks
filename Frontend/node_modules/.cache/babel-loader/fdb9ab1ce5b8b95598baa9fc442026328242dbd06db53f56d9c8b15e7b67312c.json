{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token JWT\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Intercepteur pour gérer les erreurs d'authentification\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Services d'authentification\nexport const authService = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\n\n// Services pour les tâches\nexport const taskService = {\n  getTasks: async (params = {}) => {\n    const response = await api.get('/tasks', {\n      params\n    });\n    return response.data;\n  },\n  getTask: async id => {\n    const response = await api.get(`/tasks/${id}`);\n    return response.data;\n  },\n  createTask: async taskData => {\n    const response = await api.post('/tasks', taskData);\n    return response.data;\n  },\n  updateTask: async (id, taskData) => {\n    const response = await api.put(`/tasks/${id}`, taskData);\n    return response.data;\n  },\n  deleteTask: async id => {\n    const response = await api.delete(`/tasks/${id}`);\n    return response.data;\n  }\n};\n\n// Services pour les utilisateurs\nexport const userService = {\n  getUsers: async () => {\n    const response = await api.get('/users');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","credentials","post","data","setItem","JSON","stringify","user","register","userData","logout","getCurrentUser","parse","isAuthenticated","taskService","getTasks","params","get","getTask","id","createTask","taskData","updateTask","put","deleteTask","delete","userService","getUsers"],"sources":["C:/Users/51D1B3/Documents/GestionTasks/Frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Intercepteur pour ajouter le token JWT\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Intercepteur pour gérer les erreurs d'authentification\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Services d'authentification\nexport const authService = {\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n\n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\n\n// Services pour les tâches\nexport const taskService = {\n  getTasks: async (params = {}) => {\n    const response = await api.get('/tasks', { params });\n    return response.data;\n  },\n\n  getTask: async (id) => {\n    const response = await api.get(`/tasks/${id}`);\n    return response.data;\n  },\n\n  createTask: async (taskData) => {\n    const response = await api.post('/tasks', taskData);\n    return response.data;\n  },\n\n  updateTask: async (id, taskData) => {\n    const response = await api.put(`/tasks/${id}`, taskData);\n    return response.data;\n  },\n\n  deleteTask: async (id) => {\n    const response = await api.delete(`/tasks/${id}`);\n    return response.data;\n  }\n};\n\n// Services pour les utilisateurs\nexport const userService = {\n  getUsers: async () => {\n    const response = await api.get('/users');\n    return response.data;\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}